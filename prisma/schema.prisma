generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model access_token {
  id               String    @id @default(uuid())
  created_datetime DateTime? @default(now())
  updated_datetime DateTime? @default(now())
  deleted_datetime DateTime?
  user_id          String?   @db.VarChar(256)
  active           Int       @default(1)
  expiry_datetime  DateTime?
  token            String? // Add the token field to store the JWT
}

model Organization {
  id          String     @id @default(uuid())
  aiOrgId     Int?
  name        String?
  phone       String?
  address     String?
  city        String?
  state       String?
  country     String?
  zip         Int?
  domain      String?
  industry    String?
  description String?
  users       User[]
  contacts    Contact[]

  createdAt DateTime @default(now())
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  fullName       String
  password       String
  phone          String?
  role           String       @default("admin")
  verified       Boolean      @default(false)
  orgId          String
  aiOrgId        Int?
  profilePicture String?
  organization   Organization @relation(fields: [orgId], references: [id])
  createdAt      DateTime     @default(now())
  online         Boolean      @default(true)
  schedule       Json?

  // Fields for OTP verification
  otpCode      String?
  otpExpiresAt DateTime?

  // Fields for password reset
  resetToken        String?
  resetTokenExpires DateTime?

  activationToken        String?
  activationTokenExpires DateTime?
}

model Thread {
  id        String    @id @default(uuid()) // Unique thread ID
  user      String // User who started the thread
  messages  Message[] // Relationship with messages
  createdAt DateTime  @default(now())
  type      String    @default("unassigned")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  sender    String
  threadId  String
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model ChatConfig {
  id              String   @id @default(uuid())
  orgId           String?
  aiOrgId         Int?
  allowFileUpload Boolean?
  allowEmojis     Boolean?
  position        String?
  iconColor       String?
  chatWindowColor String?
  fontColor       String?
  availability    Boolean?
  socketServer    String?
}

model Contact {
  id                String  @id @default(uuid())
  first_name        String?
  last_name         String?
  email             String?
  phone_number      String?
  company_name      String?
  website           String?
  linkedin_profile   String?
  campaign_id       String?
  location          String?
  orgId             String?
  file_name         String?
  blocked           Boolean?
  unsubscribed      Boolean?
  organization      Organization?   @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model EmailCampaign {
  id                         String     @id @default(uuid())
  campaignName               String
  csvSettings                Json?
  csvFile                    String?
  schedule                   Json?
  contacts                   String[]
  sequencesIds               String[]
  status                     String? 
  sequences                  Sequences[]   
  email_campaign_settings_id String?     
  email_campaign_settings    EmailCampaignSettings[]
  createdAt                  DateTime @default(now())
}

enum SeqType {
  EMAIL
  MANUAL
}

enum SequenceSchedularType {
  AUTOMATIC
  MANUAL
} 

model Sequences {
    id                                String     @id @default(uuid())
    seq_number                        Int?
    sequence_schedular_type           SequenceSchedularType?
    seq_delay_details                 Json?     
    seq_type                          SeqType?
    seq_variants                      Json?
    variant_distribution_type         String?  
    campaign_id                       String?
    campaigns                         EmailCampaign?   @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
    createdAt                         DateTime @default(now())
}

model EmailCampaignSettings {
  id                                   String     @id @default(uuid())
  sender_accounts                      String[]
  auto_warm_up                         Boolean?
  campaign_schedule                    Json?
  campaign_settings                    Json?
  campaign_id                          String?
  campaigns                            EmailCampaign?   @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  createdAt                            DateTime @default(now())
}
