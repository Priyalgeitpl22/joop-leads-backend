generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model access_token {
  id               String    @id @default(uuid())
  created_datetime DateTime? @default(now())
  updated_datetime DateTime? @default(now())
  deleted_datetime DateTime?
  user_id          String?   @db.VarChar(256)
  active           Int       @default(1)
  expiry_datetime  DateTime?
  token            String? // Add the token field to store the JWT
}

model Organization {
  id          String     @id @default(uuid())
  name        String?
  phone       String?
  address     String?
  city        String?
  state       String?
  country     String?
  zip         Int?
  domain      String?
  industry    String?
  description String?
  users       User[]
  contacts    Contact[]
  campaigns   Campaign[]

  createdAt DateTime @default(now())
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  fullName       String
  password       String
  phone          String?
  role           String       @default("admin")
  verified       Boolean      @default(false)
  orgId          String
  profilePicture String?
  organization   Organization @relation(fields: [orgId], references: [id])
  createdAt      DateTime     @default(now())
  online         Boolean      @default(true)
  schedule       Json?

  // Fields for OTP verification
  otpCode      String?
  otpExpiresAt DateTime?

  // Fields for password reset
  resetToken        String?
  resetTokenExpires DateTime?

  activationToken        String?
  activationTokenExpires DateTime?

  contacts Contact[] @relation(name: "UserContacts") // The relation name must match with Contact model
}

model Contact {
  id               String          @id @default(uuid())
  first_name       String?
  last_name        String?
  email            String?
  phone_number     String?
  company_name     String?
  website          String?
  linkedin_profile String?
  campaign_id      String?
  location         String?
  orgId            String // Foreign key for Organization
  uploadedBy       String // Foreign key for User (MUST BE HERE)
  file_name        String?
  blocked          Boolean?
  unsubscribed     Boolean?
  active           Boolean?
  createdAt        DateTime        @default(now())
  organization     Organization    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  uploadedUser     User            @relation(fields: [uploadedBy], references: [id], onDelete: Cascade, name: "UserContacts")
  emailCampaigns   EmailCampaign[]
}

model Campaign {
  id                         String                  @id @default(uuid())
  orgId                      String // Foreign key for Organization
  campaignName               String
  csvSettings                Json?
  csvFile                    String?
  schedule                   Json?
  contacts                   String[]
  sequencesIds               String[]
  status                     String?                 @default("DRAFT")
  sequences                  Sequences[]             @relation("CampaignToSequences")
  email_campaign_settings_id String?
  email_campaign_settings    EmailCampaignSettings[] @relation("CampaignToSettings")
  createdAt                  DateTime                @default(now())
  emailCampaigns             EmailCampaign[]
  organization               Organization            @relation(fields: [orgId], references: [id], onDelete: Cascade)
  EmailTriggerLog            EmailTriggerLog[]
}

model EmailCampaign {
  id         String @id @default(uuid())
  contactId  String
  campaignId String

  contact  Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

enum SeqType {
  EMAIL
  MANUAL
}

enum SequenceSchedularType {
  AUTOMATIC
  MANUAL
}

model Sequences {
  id                        String                 @id @default(uuid())
  seq_number                Int?
  sequence_schedular_type   SequenceSchedularType?
  seq_delay_details         Json?
  seq_type                  SeqType?
  seq_variants              Json?
  variant_distribution_type String?
  campaign_id               String?
  campaign                  Campaign?              @relation("CampaignToSequences", fields: [campaign_id], references: [id], onDelete: Cascade)
  createdAt                 DateTime               @default(now())
  EmailTriggerLog           EmailTriggerLog[]
}

model EmailCampaignSettings {
  id                String    @id @default(uuid())
  sender_accounts   Json[]
  auto_warm_up      Boolean?
  campaign_schedule Json?
  campaign_settings Json?
  campaign_id       String?
  campaign          Campaign? @relation("CampaignToSettings", fields: [campaign_id], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now())
}

model EmailTriggerLog {
  id          String   @id @default(uuid())
  email       String
  campaignId  String
  sequenceId  String
  triggeredAt DateTime @default(now())
  createdAt   DateTime  @default(now())

  campaign Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  sequence Sequences @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
}
